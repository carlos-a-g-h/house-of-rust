name: Swiss knife

on:
  workflow_dispatch:
    inputs:
      NAME:
        description: File or project name (without the .rs or .pj extension)
        required: true
        type: string

      RUN:
        description: Perform a cargo run instead of a test
        required: true
        type: boolean
        default: false

      TGUP:
        description: Upload to Telegram (ignores cargo run/test and makes a release build first)
        required: true
        type: boolean
        default: false

      REL:
        description: Create release and a binary (ignores cargo run/test and makes a release build first)
        required: true
        type: boolean
        default: false

env:
  CARGO_TERM_COLOR: always
  URL_TGUP_BIN: "https://github.com/carlos-a-g-h/tgup/releases/download/tgup/tgup.linux.amd64"
  URL_TGUP_CFG: "${{ secrets.URL_TGUP_CFG }}"

jobs:
  main:
    runs-on: ubuntu-latest
    steps:
    - name: Fetch repo
      uses: actions/checkout@v3
    - name: Run cargo init
      run: |
        F_RS="${{ inputs.NAME }}"".rs"
        D_PJ="${{ inputs.NAME }}"".pj"
        DET=false
        if [ -f "$F_RS" ]
        then
          DET=true
          PROJECT="$F_RS"
        fi
        if [ -d "$D_PJ" ] && [ $DET = false ]
        then
          DET=true
          PROJECT="$D_PJ"
        fi
        if [ $DET = true ]
        then
          mkdir _
          mv -v ./* _/ || true
          mv -vf _/"$PROJECT" ./
          rm -vrf _
          cargo init --vcs=none "${{ inputs.NAME }}"
          if [ -f "$F_RS" ]
          then
            mv "$PROJECT" "${{ inputs.NAME }}"/src/main.rs
          fi
          if [ -d "$D_PJ" ]
          then
            cp -va "$PROJECT"/* "${{ inputs.NAME }}"/
            rm -rf "$PROJECT"
          fi
          mv "${{ inputs.NAME }}"/* ./
          if [ -f "dep.txt" ]
          then
            # cat "dep.txt"|grep "^[dependencies]"
            # if [ $? -eq 0 ]
            # then
            #   true
            # else
            #   printf "\n[dependencies]\n" >> "Cargo.toml"
            # fi
            cat "dep.txt" >> "Cargo.toml"
            rm "dep.txt"
            printf "\nCargo.toml:\n"
            cat "Cargo.toml"
          fi
          printf "\nFiles\n"
          find ./|grep -v "^./.git"
        fi

    - name: Run cargo build and test (or run)
      if: ${{ inputs.TGUP == false && inputs.REL == false }}
      run: |
        echo "Running: cargo build"
        cargo build --verbose

        DO_RUN=${{ inputs.RUN }}
        if [ $DO_RUN == true ]
        then
          printf "\nProgram output is below this line\n"
          cargo run --verbose
        fi
        if [ $DO_RUN == false ]
        then
          printf "\nTest results are below this line\n"
          cargo test --verbose
        fi

    - name: Do a release build
      if: ${{ inputs.TGUP == true || inputs.REL == true }}
      run: |
        rustup target add x86_64-unknown-linux-musl
        RUSTFLAGS='-C target-feature=+crt-static' cargo build --release --verbose --target x86_64-unknown-linux-musl

    - name: Build and upload to Telegram chat
      if: ${{ inputs.TGUP == true }}
      run: |
        BLOB=$(find target/|grep /"${{ inputs.NAME }}"$)
        echo ""
        wget "${{ env.URL_TGUP_CFG }}" -O "up.json"
        wget "${{ env.URL_TGUP_BIN }}" -O "up.bin"
        chmod +x up.bin
        ./up.bin "$BLOB"
        # ./up.bin target/x86_64-unknown-linux-musl/release/"${{ inputs.NAME }}"
        # CHECK THIS OUT LATER
        # TGT="rusty_calc";find target/|grep /"$TGT"$
