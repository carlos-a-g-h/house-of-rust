name: Rust automations

on:
  workflow_dispatch:
    inputs:
      NAME:
        description: File or project name (without the .rs or .pj extension)
        required: true
        type: string

      RUN:
        description: Perform a cargo run instead of a test
        required: true
        type: boolean
        default: false

      TGUP:
        description: Upload to Telegram (ignores cargo run/test and makes release builds)
        required: true
        type: boolean
        default: false

      REL:
        description: Create a GH release (ignores cargo run/test and makes release builds)
        required: true
        type: boolean
        default: false

      JUSTLIN:
        description: Create release build only for Linux
        required: true
        type: boolean
        default: false

      JUSTWIN:
        description: Create release build only for Windows
        required: true
        type: boolean
        default: false

env:
  CARGO_TERM_COLOR: always
  URL_TGUP_BIN: "https://github.com/carlos-a-g-h/tgup/releases/download/tgup/tgup.linux.amd64"
  URL_TGUP_CFG: "${{ secrets.URL_TGUP_CFG }}"
  NAME_LIN_OK: "${{ inputs.NAME }}.linux.amd64"
  NAME_WIN_OK: "${{ inputs.NAME }}.win64.exe"

jobs:
  main:
    runs-on: ubuntu-latest
    steps:
    - name: Fetch repo
      uses: actions/checkout@v3
    - name: Run cargo init
      run: |
        F_RS="${{ inputs.NAME }}"".rs"
        D_PJ="${{ inputs.NAME }}"".pj"
        if [ -f "$F_RS" ] && [ -d "$D_PJ" ]
        then
          echo "[!] There can only be $D_PJ XOR $F_RS"
          exit 1
        fi
        if [ -f "$F_RS" ] || [ -d "$D_PJ" ]
        then
          echo "OK"
        else
          echo "[!] Project or file not found"
          exit 1
        fi
        cargo init --vcs=none "${{ inputs.NAME }}"
        OK=false
        if [ -f "$F_RS" ]
        then
          OK=true
          mkdir -p "${{ inputs.NAME }}"/src/
          mv -v "$F_RS" "${{ inputs.NAME }}"/src/
        fi
        if [ -d "$D_PJ" ] && [ $DET = false ]
        then
          OK=true
          mv -vf "$D_PJ"/* "${{ inputs.NAME }}"/
        fi
        if [ OK = false ]
        then
          exit 1
        fi

    - name: Run cargo test (or run)
      if: ${{ inputs.TGUP == false && inputs.REL == false }}
      working-directory: "${{ inputs.NAME }}"
      run: |
        echo "Running: cargo build"
        cargo build --verbose
        DO_RUN=${{ inputs.RUN }}
        if [ $DO_RUN == true ]
        then
          printf "\nProgram output is below this line\n"
          cargo run --verbose
        fi
        if [ $DO_RUN == false ]
        then
          printf "\nTest results are below this line\n"
          cargo test --verbose
        fi

    - name: Build the release for Linux
      if: ${{ inputs.JUSTWIN == false && ( inputs.TGUP == true || inputs.REL == true ) }}
      working-directory: "${{ inputs.NAME }}"
      run: |
        sudo apt install -y musl musl-dev
        rustup target add x86_64-unknown-linux-musl
        RUSTFLAGS='-C target-feature=+crt-static' cargo build --release --verbose --target x86_64-unknown-linux-musl
        BUILD_LIN=$(find target/x86_64-unknown-linux-musl|grep /"${{ inputs.NAME }}"$)
        echo "BUILD_LIN = $BUILD_LIN"
        if [ -f "$BUILD_LIN" ]
        then
          mv -v "$BUILD_LIN" "./${{ env.NAME_LIN_OK }}"
        fi

    - name: Build the release for Windows
      if: ${{ inputs.JUSTLIN == false && ( inputs.TGUP == true || inputs.REL == true ) }}
      working-directory: "${{ inputs.NAME }}"
      run: |
        sudo apt install -y mingw-w64
        rustup target add x86_64-pc-windows-gnu
        RUSTFLAGS='-C target-feature=+crt-static' cargo build --release --verbose --target x86_64-pc-windows-gnu
        # RUSTFLAGS='-C target-feature=+crt-static -C linker=x86_64-w64-mingw32-gcc' cargo build --release --verbose --target x86_64-pc-windows-gnu
        # RUSTFLAGS='-C target-feature=+crt-static' CARGO_TARGET_X86_64-PC-WINDOWS-GNU_LINKER='x86_64-pc-windows-gnu-gcc' cargo build --release --verbose --target x86_64-pc-windows-gnu
        BUILD_WIN=$(find target/x86_64-pc-windows-gnu|grep /"${{ inputs.NAME }}.exe"$)
        echo "BUILD_WIN = $BUILD_WIN"
        if [ -f "$BUILD_WIN" ]
        then
          mv -v "$BUILD_WIN" "./${{ env.NAME_WIN_OK }}"
        fi

    - name: Upload the release builds to a Telegram chat
      if: ${{ inputs.TGUP == true && ( inputs.JUSTWIN == false || inputs.JUSTLIN == false) }}
      working-directory: "${{ inputs.NAME }}"
      run: |
        wget "${{ env.URL_TGUP_CFG }}" -O "up.json"
        wget "${{ env.URL_TGUP_BIN }}" -O "up.bin"
        chmod +x up.bin
        ./up.bin "${{ env.NAME_LIN_OK }}" "${{ env.NAME_WIN_OK }}"

    - name: Create release
      if: ${{ inputs.REL == true && ( inputs.JUSTWIN == false || inputs.JUSTLIN == false) }}
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      with:
        tag_name: "${{ inputs.NAME }}"
        release_name: "${{ inputs.NAME }}"
        draft: false
        prerelease: false

    - name: 'Create release: Add the Linux build'
      if: ${{ inputs.REL == true && inputs.JUSTWIN == false }}
      id: uplin
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: "${{ inputs.NAME }}/${{ env.NAME_LIN_OK }}"
        asset_name: "${{ env.NAME_LIN_OK }}"
        asset_content_type: application/octet-stream

    - name: 'Create release: Add the Windows build'
      if: ${{ inputs.REL == true && inputs.JUSTLIN == false }}
      id: upwin
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: "${{ inputs.NAME }}/${{ env.NAME_WIN_OK }}"
        asset_name: "${{ env.NAME_WIN_OK }}"
        asset_content_type: application/octet-stream
